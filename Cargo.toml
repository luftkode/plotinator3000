[package]
name = "plotinator3000"
description = "Log viewer app for viewing plots of data from projects such as motor and generator control"
authors.workspace = true
version.workspace = true
edition.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
rust-version.workspace = true

[package.metadata.wix]
upgrade-guid = "7063C05B-24FE-4CE5-A338-6D750F3F10CE"
path-guid = "025605DB-83DB-4162-B505-26B36C02D0B9"
license = false
eula = false
product-icon = "assets/favicon.ico"

[workspace]
members = ["crates/*"]

[workspace.package]
authors = ["SkyTEM Surveys", "Marc Beck KÃ¶nig"]
version = "1.14.2"
edition = "2024"
rust-version = "1.85.0"
license = "MIT OR Apache-2.0"
repository = "https://github.com/luftkode/plotinator3000"
homepage = "https://github.com/luftkode/plotinator3000"

[workspace.dependencies]
plotinator-test-util.path = "crates/plotinator-test-util"
plotinator-logs.path = "crates/plotinator-logs"
plotinator-log-if.path = "crates/plotinator-log-if"
plotinator-plot-util.path = "crates/plotinator-plot-util"
plotinator-hdf5.path = "crates/plotinator-hdf5"
plotinator-mqtt.path = "crates/plotinator-mqtt"
plotinator-macros.path = "crates/plotinator-macros"
plotinator-supported-formats.path = "crates/plotinator-supported-formats"
plotinator-updater.path = "crates/plotinator-updater"
egui = { version = "0.31", features = ["rayon", "callstack"] }
eframe = { version = "0.31", default-features = false, features = [
    "default_fonts", # Embed the default egui fonts.
    "glow",          # Use the glow rendering backend. Alternative: "wgpu".
    "persistence",   # Enable restoring app state when restarting the app.
    "wayland",
    "x11"
] }
egui_plot = { version = "0.31", features = ["serde"] }
log = "0.4"
serde = { version = "1", features = ["derive"] }
serde_json = "1.0.140"
serde-big-array = "0.5.1"
strum = "0.27.1"
strum_macros = "0.27.1"
byteorder = "1.5.0"
chrono = { version = "0.4.40", features = ["serde"] }
getset = "0.1.5"
derive_more = { version = "2", features = ["full"] }
num-traits = "0.2.19"
toml = "0.8.19"
thiserror = "2.0"
semver = "1.0.26"
elevated-command = "1.1"
paste = "1.0.15"
anyhow = "1.0.98"
rumqttc = "0.24.0"
memmap2 = "0.9.5"
tokio = "1.45.1"
# Dependencies for profiling the app
profiling = { version = "1.0.16", default-features = false, features = ["profile-with-puffin"] }
puffin = "0.19"
puffin_http = "0.16"

# Dev dependencies
testresult = "0.4.1"
pretty_assertions = "1.4.1"
tempfile = "3.19.1"
reqwest = "0.12.18"

[dependencies]
plotinator-logs.workspace = true
plotinator-log-if.workspace = true
plotinator-plot-util.workspace = true
plotinator-hdf5.workspace = true
plotinator-test-util.workspace = true
plotinator-macros.workspace = true
plotinator-supported-formats.workspace = true
egui_plot.workspace = true
log.workspace = true
serde.workspace = true
strum.workspace = true
strum_macros.workspace = true
chrono.workspace = true
getset.workspace = true
semver.workspace = true
egui.workspace = true
eframe.workspace = true
rfd = "0.15"
egui-phosphor = "0.9.0"
egui-notify = "0.19.0"
tokio.workspace = true
memmap2.workspace = true

[dev-dependencies]
testresult.workspace = true
tempfile.workspace = true
# For GUI and GUI snapshot tests
egui_kittest = { version = "0.31.1", features = ["eframe", "snapshot", "wgpu", "x11"] }


# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.11"
zip = "4.0.0"
plotinator-updater = {workspace = true, optional = true }
plotinator-mqtt = { workspace = true, optional = true }
profiling = { workspace = true, optional = true}
puffin = { workspace = true, optional = true}
puffin_http = { workspace = true, optional = true}

# native (except aarch64-linux):
[target.'cfg(all(not(target_arch = "wasm32"), not(all(target_arch = "aarch64", target_os = "linux"))))'.dependencies]
mimalloc = "0.1.46"

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen-futures = "0.4"
web-sys = "0.3.70"

# windows
[target.'cfg(target_os = "windows")'.dependencies]
elevated-command.workspace = true

[features]
default = ["selfupdater", "mqtt", "hdf5"]
hdf5 = ["plotinator-supported-formats/hdf5"]
selfupdater = ["dep:plotinator-updater"]
mqtt = ["dep:plotinator-mqtt"]
profiling = ["dep:profiling", "dep:puffin", "dep:puffin_http"]

[profile.release]
opt-level = 3
debug = false
panic = "abort"
strip = true
lto = true
codegen-units = 1

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"

[lints]
workspace = true

[workspace.lints.rust]
missing_copy_implementations = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unused_results = "allow"               # All ui elements return a response, we don't want to have to add 'let _ = ' to all of them when we don't need the response
unused_import_braces = "warn"
variant_size_differences = "warn"
unexpected_cfgs = "warn"
unsafe_code = "warn"

[workspace.lints.clippy]
disallowed_macros = "warn"                  # See clippy.toml
disallowed_methods = "warn"                 # See clippy.toml
disallowed_names = "warn"                   # See clippy.toml
disallowed_script_idents = "warn"           # See clippy.toml
disallowed_types = "warn"                   # See clippy.toml
as_ptr_cast_mut = "warn"
await_holding_lock = "warn"
bool_to_int_with_if = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
clear_with_drain = "warn"
cloned_instead_of_copied = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
doc_link_with_quotes = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
from_iter_instead_of_collect = "warn"
get_unwrap = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
index_refutable_slice = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
into_iter_without_iter = "warn"
invalid_upcast_comparisons = "warn"
iter_not_returning_iterator = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_without_into_iter = "warn"
large_digit_groups = "warn"
large_include_file = "warn"
large_stack_arrays = "warn"
large_stack_frames = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
literal_string_with_formatting_args = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_instant_elapsed = "warn"
manual_is_power_of_two = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
map_unwrap_or = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mismatching_type_param_order = "warn"
missing_enforced_import_renames = "warn"
missing_safety_doc = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
needless_pass_by_value = "warn"
needless_range_loop = "warn"
negative_feature_names = "warn"
non_zero_suggestions = "warn"
nonstandard_macro_braces = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
pathbuf_init_then_push = "warn"
ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
pub_without_shorthand = "warn"
rc_mutex = "warn"
readonly_write_lock = "warn"
redundant_type_annotations = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
set_contains_or_insert = "warn"
should_panic_without_expect = "warn"
significant_drop_tightening = "warn"
single_char_pattern = "warn"
single_match_else = "warn"
str_to_string = "warn"
string_add_assign = "warn"
string_add = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
string_to_string = "warn"
suspicious_command_arg_space = "warn"
suspicious_xor_used_as_pow = "warn"
todo = "warn"
too_long_first_doc_paragraph = "warn"
too_many_lines = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
tuple_array_conversions = "warn"
unchecked_duration_subtraction = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
uninhabited_references = "warn"
uninlined_format_args = "warn"
unnecessary_box_returns = "warn"
unnecessary_literal_bound = "warn"
unnecessary_safety_doc = "warn"
unnecessary_struct_initialization = "warn"
unnecessary_wraps = "warn"
unnested_or_patterns = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
unused_self = "warn"
unused_trait_names = "warn"
unwrap_used = "warn"
use_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
wildcard_dependencies = "warn"
wildcard_imports = "warn"
zero_sized_map_values = "warn"
ref_patterns = "warn"
maybe_infinite_iter = "warn"
large_enum_variant = "warn"
shadow_unrelated = "allow"                  # Shadowing is very useful for the nested scoped ui elements
shadow_same = "warn"
int_plus_one = "warn"
range_plus_one = "warn"
nonminimal_bool = "warn"
if_not_else = "warn"
manual_filter_map = "warn"
option_filter_map = "warn"
